/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.baomidou.controller.api;

import org.springframework.core.io.Resource;
import com.baomidou.controller.model.RmsDriverExistsCodeRequest;
import com.baomidou.controller.model.RmsDriverExistsCodeResponse;
import com.baomidou.controller.model.RmsDriverExistsNameRequest;
import com.baomidou.controller.model.RmsDriverExistsNameResponse;
import com.baomidou.controller.model.RmsDriverGetModelRequest;
import com.baomidou.controller.model.RmsDriverGetModelResponse;
import com.baomidou.controller.model.RmsDriverGetPageRequest;
import com.baomidou.controller.model.RmsDriverGetPageResponse;
import com.baomidou.controller.model.RmsDriverGetTotalRequest;
import com.baomidou.controller.model.RmsDriverGetTotalResponse;
import com.baomidou.controller.model.RmsDriverSaveRequest;
import com.baomidou.controller.model.RmsDriverSaveResponse;
import com.baomidou.controller.model.RmsDriverUpdateStatusRequest;
import com.baomidou.controller.model.RmsDriverUpdateStatusResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "rmsDriver", description = "the rmsDriver API")
public interface RmsDriverApi {

    Logger log = LoggerFactory.getLogger(RmsDriverApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "导出", nickname = "downloadTemplate", notes = "", authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = {  })
    @RequestMapping(value = "rmsDriver/downloadTemplate",
        method = RequestMethod.POST)
    default ResponseEntity<Void> downloadTemplate() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "existsCode", notes = "", response = RmsDriverExistsCodeResponse.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = RmsDriverExistsCodeResponse.class) })
    @RequestMapping(value = "rmsDriver/existsCode",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RmsDriverExistsCodeResponse> existsCode(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RmsDriverExistsCodeRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"code\" : 0,\r\n  \"data\" : true,\r\n  \"message\" : \"message\"\r\n}", RmsDriverExistsCodeResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "existsName", notes = "", response = RmsDriverExistsNameResponse.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = RmsDriverExistsNameResponse.class) })
    @RequestMapping(value = "rmsDriver/existsName",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RmsDriverExistsNameResponse> existsName(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RmsDriverExistsNameRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"code\" : 0,\r\n  \"data\" : true,\r\n  \"message\" : \"message\"\r\n}", RmsDriverExistsNameResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "导出", nickname = "exportExcel", notes = "", authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = {  })
    @RequestMapping(value = "rmsDriver/exportExcel",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> exportExcel(@ApiParam(value = "", required=true) @RequestParam(value="source", required=true)  String source) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getModel", notes = "", response = RmsDriverGetModelResponse.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = RmsDriverGetModelResponse.class) })
    @RequestMapping(value = "rmsDriver/getModel",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RmsDriverGetModelResponse> getModel(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RmsDriverGetModelRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"code\" : 0,\r\n  \"data\" : {\r\n    \"birthday\" : \"2000-01-23\",\r\n    \"code\" : \"code\",\r\n    \"rmsMotorcadeName\" : \"rmsMotorcadeName\",\r\n    \"bankName\" : \"bankName\",\r\n    \"remark\" : \"remark\",\r\n    \"rmsMotorcadeId\" : 2,\r\n    \"licenseDate\" : \"2000-01-23\",\r\n    \"taskDistance\" : 4.145608029883936,\r\n    \"licenseValidPeriod\" : \"2000-01-23\",\r\n    \"iphone2\" : \"iphone2\",\r\n    \"sysOrgId\" : 3,\r\n    \"id\" : 5,\r\n    \"identityValidPeriod\" : \"2000-01-23\",\r\n    \"auditStatusName\" : \"auditStatusName\",\r\n    \"bankAccount\" : \"bankAccount\",\r\n    \"sysOrgName\" : \"sysOrgName\",\r\n    \"sex\" : \"sex\",\r\n    \"identityCard\" : \"identityCard\",\r\n    \"iphone\" : \"iphone\",\r\n    \"driverType\" : 5,\r\n    \"taskDoneCount\" : 7,\r\n    \"taskCount\" : 2,\r\n    \"licenseCard\" : \"licenseCard\",\r\n    \"sourceType\" : 7,\r\n    \"licenseModel\" : \"licenseModel\",\r\n    \"baseWages\" : 1.4658129805029452,\r\n    \"name\" : \"name\",\r\n    \"auditStatus\" : 1,\r\n    \"age\" : 6,\r\n    \"status\" : 9\r\n  },\r\n  \"message\" : \"message\"\r\n}", RmsDriverGetModelResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getPage", notes = "", response = RmsDriverGetPageResponse.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = RmsDriverGetPageResponse.class) })
    @RequestMapping(value = "rmsDriver/getPage",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RmsDriverGetPageResponse> getPage(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RmsDriverGetPageRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"code\" : 0,\r\n  \"data\" : [ {\r\n    \"birthday\" : \"2000-01-23\",\r\n    \"code\" : \"code\",\r\n    \"sourceTypeName\" : \"sourceTypeName\",\r\n    \"rmsMotorcadeName\" : \"rmsMotorcadeName\",\r\n    \"bankName\" : \"bankName\",\r\n    \"remark\" : \"remark\",\r\n    \"rmsMotorcadeId\" : 2,\r\n    \"licenseDate\" : \"2000-01-23\",\r\n    \"driverTypeName\" : \"driverTypeName\",\r\n    \"taskDistance\" : 7.386281948385884,\r\n    \"pinYin\" : \"pinYin\",\r\n    \"licenseValidPeriod\" : \"2000-01-23\",\r\n    \"iphone2\" : \"iphone2\",\r\n    \"sysOrgId\" : 2,\r\n    \"id\" : 5,\r\n    \"auditStatusName\" : \"auditStatusName\",\r\n    \"identityValidPeriod\" : \"2000-01-23\",\r\n    \"bankAccount\" : \"bankAccount\",\r\n    \"sysOrgName\" : \"sysOrgName\",\r\n    \"sex\" : \"sex\",\r\n    \"updateUser\" : \"updateUser\",\r\n    \"updateTime\" : \"2000-01-23\",\r\n    \"identityCard\" : \"identityCard\",\r\n    \"iphone\" : \"iphone\",\r\n    \"driverType\" : 5,\r\n    \"taskDoneCount\" : 1,\r\n    \"taskCount\" : 4,\r\n    \"licenseCard\" : \"licenseCard\",\r\n    \"createTime\" : \"2000-01-23\",\r\n    \"sourceType\" : 7,\r\n    \"licenseModel\" : \"licenseModel\",\r\n    \"baseWages\" : 1.4658129805029452,\r\n    \"name\" : \"name\",\r\n    \"tenantId\" : 1,\r\n    \"auditStatus\" : 3,\r\n    \"createUser\" : \"createUser\",\r\n    \"age\" : 6,\r\n    \"status\" : 9\r\n  }, {\r\n    \"birthday\" : \"2000-01-23\",\r\n    \"code\" : \"code\",\r\n    \"sourceTypeName\" : \"sourceTypeName\",\r\n    \"rmsMotorcadeName\" : \"rmsMotorcadeName\",\r\n    \"bankName\" : \"bankName\",\r\n    \"remark\" : \"remark\",\r\n    \"rmsMotorcadeId\" : 2,\r\n    \"licenseDate\" : \"2000-01-23\",\r\n    \"driverTypeName\" : \"driverTypeName\",\r\n    \"taskDistance\" : 7.386281948385884,\r\n    \"pinYin\" : \"pinYin\",\r\n    \"licenseValidPeriod\" : \"2000-01-23\",\r\n    \"iphone2\" : \"iphone2\",\r\n    \"sysOrgId\" : 2,\r\n    \"id\" : 5,\r\n    \"auditStatusName\" : \"auditStatusName\",\r\n    \"identityValidPeriod\" : \"2000-01-23\",\r\n    \"bankAccount\" : \"bankAccount\",\r\n    \"sysOrgName\" : \"sysOrgName\",\r\n    \"sex\" : \"sex\",\r\n    \"updateUser\" : \"updateUser\",\r\n    \"updateTime\" : \"2000-01-23\",\r\n    \"identityCard\" : \"identityCard\",\r\n    \"iphone\" : \"iphone\",\r\n    \"driverType\" : 5,\r\n    \"taskDoneCount\" : 1,\r\n    \"taskCount\" : 4,\r\n    \"licenseCard\" : \"licenseCard\",\r\n    \"createTime\" : \"2000-01-23\",\r\n    \"sourceType\" : 7,\r\n    \"licenseModel\" : \"licenseModel\",\r\n    \"baseWages\" : 1.4658129805029452,\r\n    \"name\" : \"name\",\r\n    \"tenantId\" : 1,\r\n    \"auditStatus\" : 3,\r\n    \"createUser\" : \"createUser\",\r\n    \"age\" : 6,\r\n    \"status\" : 9\r\n  } ],\r\n  \"message\" : \"message\"\r\n}", RmsDriverGetPageResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getTotal", notes = "", response = RmsDriverGetTotalResponse.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = RmsDriverGetTotalResponse.class) })
    @RequestMapping(value = "rmsDriver/getTotal",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RmsDriverGetTotalResponse> getTotal(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RmsDriverGetTotalRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"total\" : 6,\r\n  \"code\" : 0,\r\n  \"message\" : \"message\"\r\n}", RmsDriverGetTotalResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "导入", nickname = "importExcel", notes = "", response = com.chengju.cloud.framework.model.Response.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "一般返回", response = com.chengju.cloud.framework.model.Response.class) })
    @RequestMapping(value = "rmsDriver/importExcel",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<com.chengju.cloud.framework.model.Response> importExcel(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"result\" : \"result\",\r\n  \"code\" : 0,\r\n  \"message\" : \"message\"\r\n}", com.chengju.cloud.framework.model.Response.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "save", notes = "", response = RmsDriverSaveResponse.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = RmsDriverSaveResponse.class) })
    @RequestMapping(value = "rmsDriver/save",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RmsDriverSaveResponse> save(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RmsDriverSaveRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"code\" : 0,\r\n  \"data\" : 6,\r\n  \"message\" : \"message\"\r\n}", RmsDriverSaveResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "updateStatus", notes = "", response = RmsDriverUpdateStatusResponse.class, authorizations = {
        @Authorization(value = "X-Access-Token"),
@Authorization(value = "X-Operation-Token")    }, tags={ "RmsDriver", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = RmsDriverUpdateStatusResponse.class) })
    @RequestMapping(value = "rmsDriver/updateStatus",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RmsDriverUpdateStatusResponse> updateStatus(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RmsDriverUpdateStatusRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"code\" : 0,\r\n  \"message\" : \"message\"\r\n}", RmsDriverUpdateStatusResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RmsDriverApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
